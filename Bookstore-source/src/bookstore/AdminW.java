/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bookstore;

import static bookstore.Main.currentuser;
import static bookstore.User.a_pswrd;
import java.awt.CardLayout;
import java.util.Arrays;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author IntrovertBoy
 */
public class AdminW extends javax.swing.JFrame {

    /**
     * Creates new form AdminW
     */
    
    private DefaultTableModel model;
    private DefaultTableModel model1;
    
    public AdminW() {
        initComponents();
        model = (DefaultTableModel) Books.getModel();
        Books.setModel(model);
        for(Book book : Bookstore.books){
            model.addRow(new Object[]{book.title, book.author, book.price, book.qty});
        }
        username.setText(currentuser.login);
        
        model1 = (DefaultTableModel) Orders.getModel();
        Orders.setModel(model1);
        for(Order order : Bookstore.orders){
            for(Book book : Bookstore.books){
                if(book.title.equals(order.book)){
                    model1.addRow(new Object[]{order.id, book.title, book.author, book.price, order.user});
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BookDialog = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        TitleField = new javax.swing.JTextField();
        YearField = new javax.swing.JTextField();
        AuthorField = new javax.swing.JTextField();
        NrOfPagesField = new javax.swing.JTextField();
        GenreField = new javax.swing.JTextField();
        PriceField = new javax.swing.JTextField();
        OkButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        QuantityField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DescriptionField = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        ExitButton = new javax.swing.JButton();
        admin_panel = new javax.swing.JPanel();
        book_panel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Books = new javax.swing.JTable();
        DeleteBook = new javax.swing.JButton();
        AddBook = new javax.swing.JButton();
        AddStock = new javax.swing.JButton();
        RemStock = new javax.swing.JButton();
        acc_panel = new javax.swing.JPanel();
        username = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CHPassword = new javax.swing.JButton();
        CHPassword1 = new javax.swing.JButton();
        DelAccount = new javax.swing.JButton();
        order_panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Orders = new javax.swing.JTable();
        DelOrder = new javax.swing.JButton();
        CompleteOrder = new javax.swing.JButton();
        BookButton = new javax.swing.JButton();
        OrderButton = new javax.swing.JButton();
        AccountButton = new javax.swing.JButton();

        BookDialog.setTitle("Book Info");
        BookDialog.setResizable(false);
        BookDialog.setSize(new java.awt.Dimension(425, 535));

        jPanel2.setPreferredSize(new java.awt.Dimension(340, 365));

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel1.setText("Title");

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel3.setText("Author");

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel6.setText("Number of pages");

        jLabel7.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel7.setText("Year");

        jLabel8.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel8.setText("Price");

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel9.setText("Genre");

        TitleField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        YearField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        AuthorField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        NrOfPagesField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        GenreField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        PriceField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        OkButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        OkButton.setText("OK");
        OkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkButtonActionPerformed(evt);
            }
        });

        CancelButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        CancelButton.setText("CANCEL");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel10.setText("Quantity");

        QuantityField.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel11.setText("Description");

        DescriptionField.setColumns(20);
        DescriptionField.setLineWrap(true);
        DescriptionField.setRows(5);
        DescriptionField.setWrapStyleWord(true);
        jScrollPane1.setViewportView(DescriptionField);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(OkButton)
                            .addComponent(jLabel6))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(CancelButton))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(NrOfPagesField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(YearField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(GenreField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(PriceField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(QuantityField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(TitleField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                .addComponent(AuthorField)))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(AuthorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(NrOfPagesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(YearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(GenreField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(PriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(QuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OkButton)
                    .addComponent(CancelButton))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout BookDialogLayout = new javax.swing.GroupLayout(BookDialog.getContentPane());
        BookDialog.getContentPane().setLayout(BookDialogLayout);
        BookDialogLayout.setHorizontalGroup(
            BookDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
        );
        BookDialogLayout.setVerticalGroup(
            BookDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Admin Menu");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 153, 51));

        ExitButton.setBackground(new java.awt.Color(255, 255, 255));
        ExitButton.setFont(new java.awt.Font("Impact", 1, 24)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(0, 0, 0));
        ExitButton.setText("EXIT");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        admin_panel.setLayout(new java.awt.CardLayout());

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel4.setText("List of books:");

        Books.setBackground(new java.awt.Color(255, 204, 204));
        Books.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Books.setForeground(new java.awt.Color(0, 0, 0));
        Books.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Author", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Books.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(Books);
        if (Books.getColumnModel().getColumnCount() > 0) {
            Books.getColumnModel().getColumn(0).setResizable(false);
            Books.getColumnModel().getColumn(1).setResizable(false);
            Books.getColumnModel().getColumn(2).setResizable(false);
            Books.getColumnModel().getColumn(3).setResizable(false);
        }

        DeleteBook.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        DeleteBook.setText("Delete Book");
        DeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBookActionPerformed(evt);
            }
        });

        AddBook.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        AddBook.setText("Add Book");
        AddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBookActionPerformed(evt);
            }
        });

        AddStock.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        AddStock.setText("Add Stock");
        AddStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStockActionPerformed(evt);
            }
        });

        RemStock.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        RemStock.setText("Remove Stock");
        RemStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemStockActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout book_panelLayout = new javax.swing.GroupLayout(book_panel);
        book_panel.setLayout(book_panelLayout);
        book_panelLayout.setHorizontalGroup(
            book_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(book_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddStock)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(RemStock)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        book_panelLayout.setVerticalGroup(
            book_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(book_panelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(book_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBook)
                    .addComponent(DeleteBook)
                    .addComponent(AddStock)
                    .addComponent(RemStock)
                    .addComponent(jLabel4))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
        );

        admin_panel.add(book_panel, "book_panel");

        username.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        username.setText("usrname");

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel5.setText("Admin name:");

        CHPassword.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        CHPassword.setText("Change account password");
        CHPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CHPasswordActionPerformed(evt);
            }
        });

        CHPassword1.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        CHPassword1.setText("Change admin password");
        CHPassword1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CHPassword1ActionPerformed(evt);
            }
        });

        DelAccount.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        DelAccount.setForeground(new java.awt.Color(255, 0, 0));
        DelAccount.setText("Delete Account");
        DelAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelAccountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout acc_panelLayout = new javax.swing.GroupLayout(acc_panel);
        acc_panel.setLayout(acc_panelLayout);
        acc_panelLayout.setHorizontalGroup(
            acc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(acc_panelLayout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addGroup(acc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DelAccount)
                    .addGroup(acc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CHPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(username)
                        .addComponent(CHPassword1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(226, Short.MAX_VALUE))
            .addGroup(acc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(acc_panelLayout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addComponent(jLabel5)
                    .addContainerGap(532, Short.MAX_VALUE)))
        );
        acc_panelLayout.setVerticalGroup(
            acc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(acc_panelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(username)
                .addGap(18, 18, 18)
                .addComponent(CHPassword)
                .addGap(18, 18, 18)
                .addComponent(CHPassword1)
                .addGap(18, 18, 18)
                .addComponent(DelAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(acc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(acc_panelLayout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(jLabel5)
                    .addContainerGap(276, Short.MAX_VALUE)))
        );

        admin_panel.add(acc_panel, "acc_panel");

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel2.setText("List of orders:");

        Orders.setBackground(new java.awt.Color(255, 204, 204));
        Orders.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        Orders.setForeground(new java.awt.Color(0, 0, 0));
        Orders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Title", "Author", "Price", "User"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Orders.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(Orders);
        if (Orders.getColumnModel().getColumnCount() > 0) {
            Orders.getColumnModel().getColumn(0).setResizable(false);
            Orders.getColumnModel().getColumn(1).setResizable(false);
            Orders.getColumnModel().getColumn(2).setResizable(false);
            Orders.getColumnModel().getColumn(3).setResizable(false);
            Orders.getColumnModel().getColumn(4).setResizable(false);
        }

        DelOrder.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        DelOrder.setText("Delete Order");
        DelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DelOrderActionPerformed(evt);
            }
        });

        CompleteOrder.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        CompleteOrder.setText("Complete Order");
        CompleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompleteOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout order_panelLayout = new javax.swing.GroupLayout(order_panel);
        order_panel.setLayout(order_panelLayout);
        order_panelLayout.setHorizontalGroup(
            order_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(order_panelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addGap(107, 107, 107)
                .addComponent(DelOrder)
                .addGap(18, 18, 18)
                .addComponent(CompleteOrder)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 707, Short.MAX_VALUE)
        );
        order_panelLayout.setVerticalGroup(
            order_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(order_panelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(order_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(DelOrder)
                    .addComponent(CompleteOrder))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
        );

        admin_panel.add(order_panel, "order_panel");

        BookButton.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        BookButton.setText("Books");
        BookButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookButtonActionPerformed(evt);
            }
        });

        OrderButton.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        OrderButton.setText("Orders");
        OrderButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderButtonActionPerformed(evt);
            }
        });

        AccountButton.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        AccountButton.setText("Account");
        AccountButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BookButton)
                .addGap(18, 18, 18)
                .addComponent(OrderButton)
                .addGap(18, 18, 18)
                .addComponent(AccountButton)
                .addGap(17, 17, 17))
            .addComponent(admin_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BookButton)
                        .addComponent(OrderButton)
                        .addComponent(AccountButton)))
                .addGap(18, 18, 18)
                .addComponent(admin_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        Main main = new Main();
        main.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void BookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookButtonActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)admin_panel.getLayout();
        card.show(admin_panel, "book_panel");
    }//GEN-LAST:event_BookButtonActionPerformed

    private void OrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderButtonActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)admin_panel.getLayout();
        card.show(admin_panel, "order_panel");
    }//GEN-LAST:event_OrderButtonActionPerformed

    private void AccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccountButtonActionPerformed
        // TODO add your handling code here:
        CardLayout card = (CardLayout)admin_panel.getLayout();
        card.show(admin_panel, "acc_panel");
    }//GEN-LAST:event_AccountButtonActionPerformed

    private void AddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBookActionPerformed
        // TODO add your handling code here:
        BookDialog.setLocationRelativeTo(null);
        TitleField.setText("");
        AuthorField.setText("");
        NrOfPagesField.setText("");
        YearField.setText("");
        GenreField.setText("");
        PriceField.setText("");
        QuantityField.setText("");
        DescriptionField.setText("");
        BookDialog.setVisible(true);
        
    }//GEN-LAST:event_AddBookActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        BookDialog.setVisible(false);
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void OkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkButtonActionPerformed
        // TODO add your handling code here:
        DialogFrame button = new DialogFrame();
        if(TitleField.getText().equals("") || AuthorField.getText().equals("") || NrOfPagesField.getText().equals("") 
                || YearField.getText().equals("") || GenreField.getText().equals("") || PriceField.getText().equals("")
                || QuantityField.getText().equals("") || DescriptionField.getText().equals(""))
        {
            JOptionPane.showMessageDialog(
                button, "Some fields are empty!",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
        }
        else{
            boolean u_book = true;
            for(Book book : Bookstore.books){
                if(book.title.equals(TitleField.getText())){
                    u_book = false;
                }
            }
            if(u_book){
                boolean numeric = true;
                int pages = -1;
                int year = -1;
                double price = -1;
                int qty = -1;
                try{
                    pages = Integer.parseInt(NrOfPagesField.getText());
                    year = Integer.parseInt(YearField.getText());
                    price = Double.parseDouble(PriceField.getText());
                    qty = Integer.parseInt(QuantityField.getText());
                }
                catch(Exception e){
                    numeric = false;
                }
                if(numeric && pages > 0 && year > 0 && price > 0 && qty > 0){
                    DBOps.addBook(TitleField.getText(), AuthorField.getText(), pages, year, GenreField.getText(), price, qty, DescriptionField.getText());
                    Log.adminAddedBook(currentuser.login, TitleField.getText());
                    JOptionPane.showMessageDialog(
                        button, "Book added!",
                        "Success", JOptionPane.PLAIN_MESSAGE);

                    DBOps.updateDB();
                    model.setRowCount(0);
                    for(Book book : Bookstore.books){
                        model.addRow(new Object[]{book.title, book.author, book.price, book.qty});
                    }

                    BookDialog.setVisible(false);
                }
                else{
                    JOptionPane.showMessageDialog(
                    button, "Pages, year, price and quantity fields must be positive numbers!",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(
                    button, "Book with this title already exists!",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_OkButtonActionPerformed

    private void DeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBookActionPerformed
        // TODO add your handling code here:
        DialogFrame button = new DialogFrame();
        if(Books.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(
                button, "No row is selected!",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
        }
        else{
            int n = JOptionPane.showConfirmDialog(
                button,
                "Are you sure you want to delete " + Books.getValueAt(Books.getSelectedRow(), 0).toString() + "? \n" + "(All orders for this book will also be deleted)",
                "Warning",
                JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION){
                DBOps.deleteBook(Books.getValueAt(Books.getSelectedRow(), 0).toString());
                Log.adminDeletedBook(currentuser.login, Books.getValueAt(Books.getSelectedRow(), 0).toString());
                
                JOptionPane.showMessageDialog(
                        button, "Book deleted!",
                        "Success", JOptionPane.PLAIN_MESSAGE);

                DBOps.updateDB();
                model.setRowCount(0);
                for(Book book : Bookstore.books){
                    model.addRow(new Object[]{book.title, book.author, book.price, book.qty});
                }
                
                model1.setRowCount(0);
                for(Order order : Bookstore.orders){
                    for(Book book : Bookstore.books){
                        if(book.title.equals(order.book)){
                            model1.addRow(new Object[]{order.id, book.title, book.author, book.price, order.user});
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_DeleteBookActionPerformed

    private void DelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelOrderActionPerformed
        // TODO add your handling code here:
        DialogFrame button = new DialogFrame();
        if(Orders.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(
                button, "No row is selected!",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
        }
        else{
            
            for(Order order : Bookstore.orders){
                if(order.id == (int) Orders.getValueAt(Orders.getSelectedRow(), 0))
                {
                    DBOps.deleteOrder(order.id, Orders.getValueAt(Orders.getSelectedRow(), 1).toString());
                    Log.adminCanceledOrder(currentuser.login, order.id);
                }
            }           
            DBOps.updateDB();
            model1.setRowCount(0);
            for(Order order : Bookstore.orders){
                for(Book book1 : Bookstore.books){
                    if(book1.title.equals(order.book)){
                        model1.addRow(new Object[]{order.id, book1.title, book1.author, book1.price, order.user});
                    }
                }
            }
            model.setRowCount(0);
            for(Book book : Bookstore.books){
                model.addRow(new Object[]{book.title, book.author, book.price, book.qty});
            }
            
            JOptionPane.showMessageDialog(
                    button, "Order deleted!",
                    "Success", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_DelOrderActionPerformed

    private void CompleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompleteOrderActionPerformed
        // TODO add your handling code here:
        DialogFrame button = new DialogFrame();
        if(Orders.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(
                button, "No row is selected!",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
        }
        else{
            
            for(Order order : Bookstore.orders){
                if(order.id == (int) Orders.getValueAt(Orders.getSelectedRow(), 0))
                {
                    DBOps.completeOrder(order.id);
                    Log.adminCompletedOrder(currentuser.login, order.id);
                }
            }           
            DBOps.updateDB();
            model1.setRowCount(0);
            for(Order order : Bookstore.orders){
                for(Book book1 : Bookstore.books){
                    if(book1.title.equals(order.book)){
                        model1.addRow(new Object[]{order.id, book1.title, book1.author, book1.price, order.user});
                    }
                }
            }
            model.setRowCount(0);
            for(Book book : Bookstore.books){
                model.addRow(new Object[]{book.title, book.author, book.price, book.qty});
            }
            
            JOptionPane.showMessageDialog(
                    button, "Order completed!",
                    "Success", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_CompleteOrderActionPerformed

    private void CHPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CHPasswordActionPerformed
        // TODO add your handling code here:
        JPasswordField pf = new JPasswordField();
        DialogFrame button = new DialogFrame();
        final JComponent[] inputs = new JComponent[] {
                new JLabel("Enter new password: "),
                pf
        };
        int option = JOptionPane.showConfirmDialog(null, inputs, "Password change: ", JOptionPane.OK_CANCEL_OPTION);
        if(option == JOptionPane.OK_OPTION){
            char[] new_pswrd = pf.getPassword();
            if(Arrays.equals(new_pswrd, currentuser.password)){
                
                JOptionPane.showMessageDialog(
                    button, "New password matches the old password",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            }
            else{
                
                DBOps.changePassword(new_pswrd, currentuser.login);
                DBOps.updateDB();
                JOptionPane.showMessageDialog(
                    button, "Password changed!",
                    "Success", JOptionPane.PLAIN_MESSAGE);
                currentuser.password = new_pswrd;
            }
        }
    }//GEN-LAST:event_CHPasswordActionPerformed

    private void CHPassword1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CHPassword1ActionPerformed
        // TODO add your handling code here:
        JPasswordField pf = new JPasswordField();
        DialogFrame button = new DialogFrame();
        final JComponent[] inputs = new JComponent[] {
                new JLabel("Enter new admin password: "),
                pf
        };
        int option = JOptionPane.showConfirmDialog(null, inputs, "Password change: ", JOptionPane.OK_CANCEL_OPTION);
        if(option == JOptionPane.OK_OPTION){
            char[] new_pswrd = pf.getPassword();
            if(Arrays.equals(new_pswrd, a_pswrd)){
                
                JOptionPane.showMessageDialog(
                    button, "New password matches the old password",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
            }
            else{
                
                Log.newAdminPassword(new_pswrd);
                JOptionPane.showMessageDialog(
                    button, "Password changed!",
                    "Success", JOptionPane.PLAIN_MESSAGE);
                currentuser.password = new_pswrd;
            }
        }
    }//GEN-LAST:event_CHPassword1ActionPerformed

    private void DelAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DelAccountActionPerformed
        // TODO add your handling code here:
        DialogFrame button = new DialogFrame();
        int n = JOptionPane.showConfirmDialog(
            button,
            "Are you sure you want to delete your account?",
            "Warning",
            JOptionPane.YES_NO_OPTION);
        if(n == JOptionPane.YES_OPTION){
            DBOps.deleteAccount(currentuser.login);
            Log.userDeleted(currentuser.login);
            DBOps.updateDB();
            dispose();
        }
    }//GEN-LAST:event_DelAccountActionPerformed

    private void AddStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStockActionPerformed
        // TODO add your handling code here:
        DialogFrame button = new DialogFrame();
        if(Books.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(
                button, "No row is selected!",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
        }
        else{
            
            String s = (String)JOptionPane.showInputDialog(
                    button,
                    "How many books do you want to add?",
                    "Adding Stocks",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    null,
                    "");
            boolean number = true;
            int n = 0;
            try{
                n = Integer.parseInt(s);
            }
            catch(Exception e){
                number = false;
            }
            if(!number || n <= 0){
                JOptionPane.showMessageDialog(
                button, "You must enter a positive number!",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
            }
            else{
                DBOps.addBookStock(Books.getValueAt(Books.getSelectedRow(), 0).toString(), n);
                Log.adminAddsBookStock(currentuser.login, Books.getValueAt(Books.getSelectedRow(), 0).toString(), n);
                
                DBOps.updateDB();
                model.setRowCount(0);
                for(Book book : Bookstore.books){
                    model.addRow(new Object[]{book.title, book.author, book.price, book.qty});
                }

                model1.setRowCount(0);
                for(Order order : Bookstore.orders){
                    for(Book book : Bookstore.books){
                        if(book.title.equals(order.book)){
                            model1.addRow(new Object[]{order.id, book.title, book.author, book.price, order.user});
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_AddStockActionPerformed

    private void RemStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemStockActionPerformed
        // TODO add your handling code here:
        DialogFrame button = new DialogFrame();
        if(Books.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(
                button, "No row is selected!",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
        }
        else{
            
            String s = (String)JOptionPane.showInputDialog(
                    button,
                    "How many books do you want to remove?",
                    "Adding Stocks",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    null,
                    "");
            boolean number = true;
            int n = 0;
            try{
                n = Integer.parseInt(s);
            }
            catch(Exception e){
                number = false;
            }
            if(!number || n <= 0){
                JOptionPane.showMessageDialog(
                button, "You must enter a positive number!",
                "ERROR",
                JOptionPane.ERROR_MESSAGE);
            }
            else{
                if(Integer.parseInt(Books.getValueAt(Books.getSelectedRow(), 3).toString()) < n){
                    JOptionPane.showMessageDialog(
                    button, "Number is higher, than books available!",
                    "ERROR",
                    JOptionPane.ERROR_MESSAGE);
                }
                else{
                    DBOps.removeBookStock(Books.getValueAt(Books.getSelectedRow(), 0).toString(), n);
                    Log.adminRemovesBookStock(currentuser.login, Books.getValueAt(Books.getSelectedRow(), 0).toString(), n);

                    DBOps.updateDB();
                    model.setRowCount(0);
                    for(Book book : Bookstore.books){
                        model.addRow(new Object[]{book.title, book.author, book.price, book.qty});
                    }

                    model1.setRowCount(0);
                    for(Order order : Bookstore.orders){
                        for(Book book : Bookstore.books){
                            if(book.title.equals(order.book)){
                                model1.addRow(new Object[]{order.id, book.title, book.author, book.price, order.user});
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_RemStockActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AccountButton;
    private javax.swing.JButton AddBook;
    private javax.swing.JButton AddStock;
    private javax.swing.JTextField AuthorField;
    private javax.swing.JButton BookButton;
    private javax.swing.JDialog BookDialog;
    private javax.swing.JTable Books;
    private javax.swing.JButton CHPassword;
    private javax.swing.JButton CHPassword1;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton CompleteOrder;
    private javax.swing.JButton DelAccount;
    private javax.swing.JButton DelOrder;
    private javax.swing.JButton DeleteBook;
    private javax.swing.JTextArea DescriptionField;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField GenreField;
    private javax.swing.JTextField NrOfPagesField;
    private javax.swing.JButton OkButton;
    private javax.swing.JButton OrderButton;
    private javax.swing.JTable Orders;
    private javax.swing.JTextField PriceField;
    private javax.swing.JTextField QuantityField;
    private javax.swing.JButton RemStock;
    private javax.swing.JTextField TitleField;
    private javax.swing.JTextField YearField;
    private javax.swing.JPanel acc_panel;
    private javax.swing.JPanel admin_panel;
    private javax.swing.JPanel book_panel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel order_panel;
    private javax.swing.JLabel username;
    // End of variables declaration//GEN-END:variables
}
